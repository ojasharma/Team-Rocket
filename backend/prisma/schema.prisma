// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  name       String
  email      String     @unique
  password   String
  role       Role       @default(USER)
  blogs      Blog[]
  likes      Like[] // User can like many blogs
  teams      Team[] // Teams the user belongs to (many-to-many)
  ownedTeams Team[]     @relation("TeamOwner") // Teams owned by this user
  ideas      Idea[] // User can create many startup ideas
  comments   Comment[] // User can make comments
  ideaFeeds  IdeaFeed[] // User reactions to ideas
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("users")
}

enum Role {
  USER
  FOUNDER
  INVESTOR
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[] // Blog can have many likes
  team      Team?    @relation(fields: [teamId], references: [id]) // Optional team association
  teamId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())

  @@unique([userId, blogId])
  @@map("likes")
}

model Team {
  id          String   @id @default(uuid())
  title       String
  description String?
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id])
  ownerId     String
  members     User[] // Direct many-to-many relationship with users
  blogs       Blog[] // Team can have many blogs
  ideas       Idea[] // Team can have many ideas
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("teams")
}

model Idea {
  id            String     @id @default(uuid())
  title         String
  description   String
  aiDescription String // AI-generated description
  aiScore       Float // AI-generated rating score
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  team          Team?      @relation(fields: [teamId], references: [id]) // Optional team association
  teamId        String?
  comments      Comment[] // Idea can have many comments
  feeds         IdeaFeed[] // Reactions/feeds for this idea
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("ideas")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  idea      Idea     @relation(fields: [ideaId], references: [id])
  ideaId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model IdeaFeed {
  id        String   @id @default(uuid())
  reaction  Reaction @default(LIKE)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  idea      Idea     @relation(fields: [ideaId], references: [id])
  ideaId    String
  createdAt DateTime @default(now())

  @@unique([userId, ideaId])
}

enum Reaction {
  LIKE
  LOVE
  INNOVATE
  INVEST
}
